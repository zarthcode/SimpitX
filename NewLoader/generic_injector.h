////////////////////////////////////////////////////////////////////////////////////////////
// loader: command-line interface dll injector
// Copyright (C) 2011  Wadim Egorov
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _GENERIC_INJECTOR_H
#define _GENERIC_INJECTOR_H

#include <stdio.h>

#include <Windows.h>

#include "misc.h"
#include "injector_helper.h"

// INFINITE can cause DeadLock if host process is in debug mode
#define INJLIB_WAITTIMEOUT		5000
#define WII_WAITTIMEOUT			5000

////////////////////////////////////////////////////////////////////////////////////////////
// InjectLibraryW
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
InjectLibraryW(
	DWORD dwProcessId,
	LPCWSTR lpLibPath
	);

////////////////////////////////////////////////////////////////////////////////////////////
// InjectLibraryA
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
InjectLibraryA(
	DWORD dwProcessId,
	LPCSTR lpLibPath
	);

////////////////////////////////////////////////////////////////////////////////////////////
// EjectLibrary
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
EjectLibrary(
	DWORD dwProcessId,
	LPVOID lpModule
	);

////////////////////////////////////////////////////////////////////////////////////////////
// EjectLibraryW
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
EjectLibraryW(
	DWORD dwProcessId,
	LPCWSTR lpLibPath
	);

////////////////////////////////////////////////////////////////////////////////////////////
// EjectLibraryA
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
EjectLibraryA(
	DWORD dwProcessId,
	LPCSTR lpLibPath
	);

////////////////////////////////////////////////////////////////////////////////////////////
// InjectLibraryOnStartupW
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
InjectLibraryOnStartupW(
	LPCWSTR lpLibPath,
	LPCWSTR lpProcPath,
	LPWSTR lpProcArgs,
	BOOL bWaitForInputIdle
	);

////////////////////////////////////////////////////////////////////////////////////////////
// InjectLibraryOnStartupA
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
InjectLibraryOnStartupA(
	LPCSTR lpLibPath,
	LPCSTR lpProcPath,
	LPSTR lpProcArgs,
	BOOL bWaitForInputIdle
	);

////////////////////////////////////////////////////////////////////////////////////////////
// EjectLibraryOnStartupW
////////////////////////////////////////////////////////////////////////////////////////////
BOOL
EjectLibraryOnStartupW(
	LPCWSTR lpLibPath,
	LPCWSTR lpProcPath,
	LPWSTR lpProcArgs,
	BOOL bWaitForInputIdle
	);

////////////////////////////////////////////////////////////////////////////////////////////
// EjectLibraryOnStartupA
////////////////////////////////////////////////////////////////////////////////////////////
BOOL 
EjectLibraryOnStartupA(
	LPCSTR lpLibPath,
	LPCSTR lpProcPath,
	LPSTR lpProcArgs,
	BOOL bWaitForInputIdle
	);

#endif // _GENERIC_INJECTOR_H